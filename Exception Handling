            Throwable
            /       \
         Error     Exception
                     /    \
         Checked    Unchecked (Runtime)
Throwable is the superclass for all exceptions and errors.

Exception:
Exception is the abnormal situation arise during the execution of the program. It interrupts the flow of the program.
What's an Exception?
Imagine you're withdrawing money from an ATM. Everything is fine until suddenly the cash tray gets stuck ‚Äì this is an exception.

In code, exception = something went wrong while running the program. It breaks the normal flow.

Exception Hierarchy in Java
Object
  ‚Ü≥ Throwable
      ‚Ü≥ Error
      ‚Ü≥ Exception
           ‚Ü≥ Checked Exception
           ‚Ü≥ Unchecked Exception (Runtime)

 Throwable
Throwable class has Error and Exception.

Error ‚Äì Something you shouldn‚Äôt catch (like OutOfMemoryError).

Exception ‚Äì Something you can catch and recover from.

‚öôÔ∏è Two Types of Exceptions
üß∑ 1. Checked Exception ‚Äì (Compile Time)
These are checked by the compiler, and you must either handle them or declare them.

Examples:

IOException

SQLException

ClassNotFoundException

üí° Story: You are opening a file. The compiler knows file might not exist. So it says: ‚ÄúHandle it, or I won‚Äôt compile.‚Äù

üîß 2. Unchecked Exception ‚Äì (Runtime)
These occur at runtime. Compiler doesn‚Äôt check them.

Examples:

NullPointerException

ArrayIndexOutOfBoundsException

ArithmeticException

üí° Story: You're dividing 10 by 0. Compiler says okay, but at runtime ‚Äì BOOM! Crash.


Syntax:
try {
    // risky code
} catch (ExceptionType e) {
    // handling code
} finally {
    // always runs
}
Rules You Must Know:
Without try, you cannot use catch or finally.

You can use:

try + catch

try + finally

try + catch + finally

‚úÖ try + catch = meaningful
‚ùå try + finally = allowed but not always useful

üß™ try-catch-finally Flow

try {
    int result = 10 / 0;
} catch (ArithmeticException e) {
    System.out.println("Caught error: " + e.getMessage());
} finally {
    System.out.println("This always runs!");
}
If error occurs ‚Üí goes to catch.

If no matching catch ‚Üí program crashes.

Finally always runs (even if no error or return used).

üîÅ Nested Try-Catch
First outer try executes ‚Üí then inner.
Inner catch handles only inner exceptions.


try {
    System.out.println("Outer try");
    try {
        int x = 1 / 0;
    } catch (ArithmeticException e) {
        System.out.println("Inner catch: " + e.getMessage());
    }
} catch (Exception e) {
    System.out.println("Outer catch");
}
‚ö†Ô∏è Nested Catch Order
Expected exception should come first

General Exception should come last

try {
    String str = null;
    System.out.println(str.length());
} catch (NullPointerException e) {
    System.out.println("Null value found");
} catch (Exception e) {
    System.out.println("Something went wrong");
}
‚ùóIf you put catch(Exception e) first, other catch blocks become unreachable.

üß† throw vs throws
Keyword	Meaning	Example
throw	Used to throw an exception manually	throw new ArithmeticException("Manual error")
throws	Used to declare exception in method signature	void check() throws IOException

üß® Custom Exceptions ‚Äì Create Your Own Rules
You can create your own exception class using extends Exception.

üë®‚Äçüè´ Example:

class AgeException extends Exception {
    AgeException(String msg) {
        super(msg);
    }
}

void checkAge(int age) throws AgeException {
    if (age < 18) {
        throw new AgeException("You must be 18+");
    } else {
        System.out.println("Eligible");
    }
}
üí° Story: You‚Äôre developing a voting system. If a person is under 18, throw your own custom rule.

‚ö° Real-Life Use Case

public void readFile(String fileName) {
    try {
        FileReader fr = new FileReader(fileName);
        BufferedReader br = new BufferedReader(fr);
        System.out.println(br.readLine());
    } catch (FileNotFoundException e) {
        System.out.println("File not found!");
    } catch (IOException e) {
        System.out.println("Cannot read file!");
    } finally {
        System.out.println("Done reading");
    }
}
‚úÖ try-with-resources (Java 7+)
Automatically closes resources (files, DB, etc).

try (BufferedReader br = new BufferedReader(new FileReader("data.txt"))) {
    System.out.println(br.readLine());
} catch (IOException e) {
    System.out.println("Error reading file");
}
üß™ Advanced Tips (From Real Dev Experience)
Never catch an exception if you can't handle it.

Always close your resources in finally or use try-with-resources.

Create custom exceptions for business rules.

Don‚Äôt suppress exception silently:

java
Copy
Edit
catch(Exception e) { } // ‚ùå BAD PRACTICE
